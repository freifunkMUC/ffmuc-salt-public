upstream cryptpad_upstream {
   server docker05.ov.ffmuc.net:8011;
}

server {
   listen 80;
   listen [::]:80;
   listen 443 ssl;
   listen [::]:443 ssl;
   # Force HTTPS connection. This rules is domain agnostic
   if ($scheme != "https") {
      rewrite ^ https://$host$uri permanent;
   }
   
   # CryptPad serves static assets over these two domains.
   # `main_domain` is what users will enter in their address bar.
   # Privileged computation such as key management is handled in this scope
   # UI content is loaded via the `sandbox_domain`.
   # "Content Security Policy" headers prevent content loaded via the sandbox
   # from accessing privileged information.
   # These variables must be different to take advantage of CryptPad's sandboxing techniques.
   # In the event of an XSS vulnerability in CryptPad's front-end code
   # this will limit the amount of information accessible to attackers.
   set $main_domain "cryptpad.ffmuc.net";
   set $sandbox_domain "cryptpad-sb.ffmuc.net";

   # By default CryptPad allows remote domains to embed CryptPad documents in iframes.
   # This behaviour can be blocked by changing $allowed_origins from "*" to the
   # sandbox domain, which must be permitted to load content from the main domain
   # in order for CryptPad to work as expected.
   #
   # An example is given below which can be uncommented if you want to block
   # remote sites from including content from your server
   set $allowed_origins "*";
   # set $allowed_origins "https://${sandbox_domain}";
   
   # CryptPad's dynamic content (websocket traffic and encrypted blobs)
   # can be served over separate domains. Using dedicated domains (or subdomains)
   # for these purposes allows you to move them to a separate machine at a later date
   # if you find that a single machine cannot handle all of your users.
   # If you don't use dedicated domains, this can be the same as $main_domain
   # If you do, they can be added as exceptions to any rules which block connections to remote domains.
   # You can find these variables referenced below in the relevant places
   set $api_domain "cryptpad.ffmuc.net";
   set $files_domain "cryptpad.ffmuc.net";

   # nginx doesn't let you set server_name via variables, so you need to hardcode your domains here
   server_name cryptpad.ffmuc.net cryptpad-sb.ffmuc.net;

   # You'll need to Set the path to your certificates and keys here
   # IMPORTANT: this config is intended to serve assets for at least two domains
   # (your main domain and your sandbox domain). As such, you'll need to generate a single SSL certificate
   # that includes both domains in order for things to work as expected.
   ssl_certificate     /etc/letsencrypt/live/ffmuc.net/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/ffmuc.net/privkey.pem;

   # Speeds things up a little bit when resuming a session
   ssl_session_timeout 5m;
   ssl_session_cache shared:SSL:5m;

   # You'll need nginx 1.13.0 or better to support TLSv1.3
   ssl_protocols TLSv1.2 TLSv1.3;

   # https://cipherli.st/
   ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
   ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0

   add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
   add_header X-XSS-Protection "1; mode=block";
   add_header X-Content-Type-Options nosniff;
   add_header Access-Control-Allow-Origin "${allowed_origins}";
   # add_header X-Frame-Options "SAMEORIGIN";

   # Opt out of Google's FLoC Network
   add_header Permissions-Policy interest-cohort=();

   # Enable SharedArrayBuffer in Firefox (for .xlsx export)
   add_header Cross-Origin-Resource-Policy cross-origin;
   add_header Cross-Origin-Embedder-Policy require-corp;

   # any static assets loaded with "ver=" in their URL will be cached for a year
   if ($args ~ ver=) {
      set $cacheControl max-age=31536000;
   }
   if ($uri ~ ^/.*(\/|\.html)$) {
      set $cacheControl no-cache;
   }
   # Will not set any header if it is emptystring
   add_header Cache-Control $cacheControl;

   # CSS can be dynamically set inline, loaded from the same domain, or from $main_domain
   set $styleSrc   "'unsafe-inline' 'self' https://${main_domain}";

   # connect-src restricts URLs which can be loaded using script interfaces
   # if you have configured your instance to use a dedicated $files_domain or $api_domain
   # you will need to add them below as: https://${files_domain} and https://${api_domain}
   set $connectSrc "'self' https://${main_domain} blob: wss://${api_domain} https://${sandbox_domain}";

   # fonts can be loaded from data-URLs or the main domain
   set $fontSrc    "'self' data: https://${main_domain}";

   # images can be loaded from anywhere, though we'd like to deprecate this as it allows the use of images for tracking
   set $imgSrc     "'self' data: blob: https://${main_domain}";

   # frame-src specifies valid sources for nested browsing contexts.
   # this prevents loading any iframes from anywhere other than the sandbox domain
   set $frameSrc   "'self' https://${sandbox_domain} blob:";

   # specifies valid sources for loading media using video or audio
   set $mediaSrc   "blob:";

   # defines valid sources for webworkers and nested browser contexts
   # deprecated in favour of worker-src and frame-src
   set $childSrc   "https://${main_domain}";

   # specifies valid sources for Worker, SharedWorker, or ServiceWorker scripts.
   # supercedes child-src but is unfortunately not yet universally supported.
   set $workerSrc  "'self'";

   # script-src specifies valid sources for javascript, including inline handlers
   set $scriptSrc  "'self' resource: https://${main_domain}";

   # frame-ancestors specifies which origins can embed your CryptPad instance
   # this must include 'self' and your main domain (over HTTPS) in order for CryptPad to work
   # if you have enabled remote embedding via the admin panel then this must be more permissive.
   # note: cryptpad.fr permits web pages served via https: and vector: (element desktop app)
   set $frameAncestors "'self' https://${main_domain}";
   # set $frameAncestors "'self' https: vector:";

   set $unsafe 0;
   # the following assets are loaded via the sandbox domain
   # they unfortunately still require exceptions to the sandboxing to work correctly.
   if ($uri ~ ^\/(sheet|doc|presentation)\/inner.html.*$) { set $unsafe 1; }
   if ($uri ~ ^\/common\/onlyoffice\/.*\/.*\.html.*$) { set $unsafe 1; }

   # everything except the sandbox domain is a privileged scope, as they might be used to handle keys
   if ($host != $sandbox_domain) { set $unsafe 0; }
   # this iframe is an exception. Office file formats are converted outside of the sandboxed scope
   # because of bugs in Chromium-based browsers that incorrectly ignore headers that are supposed to enable
   # the use of some modern APIs that we require when javascript is run in a cross-origin context.
   # We've applied other sandboxing techniques to mitigate the risk of running WebAssembly in this privileged scope
   if ($uri ~ ^\/unsafeiframe\/inner\.html.*$) { set $unsafe 1; }

   # privileged contexts allow a few more rights than unprivileged contexts, though limits are still applied
   if ($unsafe) {
      set $scriptSrc "'self' 'unsafe-eval' 'unsafe-inline' resource: https://${main_domain}";
   }

   # Finally, set all the rules you composed above.
   add_header Content-Security-Policy "default-src 'none'; child-src $childSrc; worker-src $workerSrc; media-src $mediaSrc; style-src $styleSrc; script-src $scriptSrc; connect-src $connectSrc; font-src $fontSrc; img-src $imgSrc; frame-src $frameSrc; frame-ancestors $frameAncestors";

   # The nodejs process can handle all traffic whether accessed over websocket or as static assets
   # We prefer to serve static content from nginx directly and to leave the API server to handle
   # the dynamic content that only it can manage. This is primarily an optimization
   location ^~ /cryptpad_websocket {
      proxy_pass http://cryptpad_upstream;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # WebSocket support (nginx 1.4)
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection upgrade;
   }

    # /api/config is loaded once per page load and is used to retrieve
    # the caching variable which is applied to every other resource
    # which is loaded during that session.
    location ~ ^/api/.*$ {
      proxy_pass http://cryptpad_upstream;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # These settings prevent both NGINX and the API server
      # from setting the same headers and creating duplicates
      proxy_hide_header Cross-Origin-Resource-Policy;
      add_header Cross-Origin-Resource-Policy cross-origin;
      proxy_hide_header Cross-Origin-Embedder-Policy;
      add_header Cross-Origin-Embedder-Policy require-corp;
   }

   # encrypted blobs are immutable and are thus cached for a year
   location ^~ /blob/ {
      proxy_pass http://cryptpad_upstream;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # WebSocket support (nginx 1.4)
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection upgrade;
      if ($request_method = 'OPTIONS') {
         add_header 'Access-Control-Allow-Origin' "${allowed_origins}";
         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
         add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
         add_header 'Access-Control-Max-Age' 1728000;
         add_header 'Content-Type' 'application/octet-stream; charset=utf-8';
         add_header 'Content-Length' 0;
         return 204;
      }
      add_header X-Content-Type-Options nosniff;
      add_header Cache-Control max-age=31536000;
      add_header 'Access-Control-Allow-Origin' "${allowed_origins}";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Content-Length';
      add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Content-Length';
   }
   location / {
      proxy_pass         http://cryptpad_upstream;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_cache        off;
      client_max_body_size 200M;
      proxy_http_version 1.1;
      proxy_request_buffering off;
   }
   
   access_log /var/log/nginx/{{ domain }}_access.log json_normal;
   error_log  /var/log/nginx/{{ domain }}_error.log;
}
