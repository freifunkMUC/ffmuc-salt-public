{%- set role = salt['pillar.get']('netbox:role:name', salt['pillar.get']('netbox:role:name')) %}
{%- set interface_details = salt['pillar.get']('netbox:interfaces:' ~ interface) %}
{%- set uplink_iface = salt['pillar.get']('netbox:config_context:network:uplink_vlan:interface') %}
{%- set peering = salt['pillar.get']('netbox:config_context:peering', None) %}
#
# {{ interface }} / {{ desc }}
#

[Match]
Name={{ interface }}

[Network]
{%- if interface_details['tagged_vlans'] is not none %}
{%- for vlan in interface_details['tagged_vlans'] %}
VLAN={{ vlan['vid'] }}
{%- endfor %}
{%- endif %}
{%- for ipaddress in ipaddresses %}
Address={{ ipaddress['address'] }}
{%- endfor %}
DNS=5.1.66.255
DNS=185.150.99.255
DNS=2001:678:e68:f000::
DNS=2001:678:ed0:f000::

{%- if interface in gateway %}
# We install the route provided for the site with a low metric
{%- for default_gw in gateway[interface] %}
[Route]
Gateway={{ default_gw }}
Destination=0.0.0.0/0
Metric=1024
{%- endfor %}
{%- endif %}

{%- if 'wg' in interface %}
[Network]
Address={{ salt['wireguard_v6.generate'](salt['pillar.get']('netbox:config_context:wireguard:public_key')) }}/128
# for systemd 250.4
#IPv6AcceptRA=false # workaround for https://github.com/systemd/systemd/issues/23197
{%- if 'nextgen-gateway' in role %}
VXLAN={{ interface | regex_replace('wg-', 'vx-') }}
{%- endif %}{# if 'nextgen-gateway' in role #}
{% for node,_ in salt['mine.get']('netbox:role:name:nextgen-gateway', 'minion_id', tgt_type='pillar').items() | sort
%}
{%- if grains['id'] not in node %}
{%- set wireguard_public_key = salt['mine.get'](node,'minion_wireguard_public', tgt_type='glob')[node] %}
{%- if wireguard_public_key %}
{%- set link_local = salt['wireguard_v6.generate'](wireguard_public_key) %}
[Route]
Destination={{ link_local }}/128
{%- endif %}
{%- endif %}{# if grains['id'] not in node #}
{%- endfor %}
{%- endif %}{# if 'wg' in interface #}


{%- if 'dummy-' in interface or 'vx-' in interface %}
BatmanAdvanced={{ interface | regex_replace('dummy-', 'bat-') | regex_replace('vx-', 'bat-') }}
{%- endif %}

{%- if 'bat-' in interface %}
[Network]
Bridge={{ interface | regex_replace('bat-', 'br-') }}
{%- endif %}

{%- if 'br-' in interface %}
[Network]
IPv6AcceptRA=no
{%- endif %}

{%- if interface == uplink_iface and peering %}
{%- for gre, details in peering.items() %}
[Network]
Tunnel=ip6gre-{{ gre }}
{%- endfor %}
{%- endif %}

{%- if 'vx-' in interface %}
{%- for node,bla in salt['mine.get']('netbox:role:name:nextgen-gateway', 'minion_id', tgt_type='pillar').items() | sort
%}
{%- if grains['id'] not in node %}
{%- set wireguard_public_key = salt['mine.get'](node,'minion_wireguard_public', tgt_type='glob')[node] %}
{%- if wireguard_public_key %}
{%- set link_local = salt['wireguard_v6.generate'](wireguard_public_key) %}

[BridgeFDB]
MACAddress=00:00:00:00:00:00
Destination={{ link_local }}
OutgoingInterface={{ interface | regex_replace('vx-', 'wg-') }}

{%- endif %}{# wireguard_public_key #}
{%- endif %}{# grains['id'] not in node #}
{%- endfor %}{# node #}

{%- endif %}{# if 'vx-' in interface #}
