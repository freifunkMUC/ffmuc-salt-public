-- functions to be used later
function file_exists(name)
   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end

--- now the real config

setACL({'0.0.0.0/0', '::/0'})
-- respond to ANY queries sent over UDP with the TC bit set, shunting to TCP.
addAction(AndRule({QTypeRule(DNSQType.ANY), TCPRule(false)}), TCAction(), {name="Shunt-ANY-to-TCP"})
addAction(RegexRule(".*\\.(10|168\\.192|(1[6-9]|2[0-9]|3[0-1])\\.172)\\.in-addr\\.arpa$"), RCodeAction(DNSRCode.NXDOMAIN), {name="RFC1918-PTR-NXDOMAIN"})

-- This adds more UDP threads https://dnsdist.org/advanced/tuning.html
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("0.0.0.0", {reusePort=true})
addLocal("::", {reusePort=true})
addLocal("::", {reusePort=true})
addLocal("::", {reusePort=true})
addLocal("::", {reusePort=true})

{%- if 'webfrontend' in grains.id %}
ssl_cert="/etc/letsencrypt/live/ffmuc.net/fullchain.pem"
ssl_key="/etc/letsencrypt/live/ffmuc.net/privkey.pem"

-- listen for DoT on external interface
addTLSLocal("0.0.0.0", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("0.0.0.0", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("0.0.0.0", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("0.0.0.0", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("[::]", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("[::]", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("[::]", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })
addTLSLocal("[::]", ssl_cert, ssl_key, { numberOfStoredSessions=0, reusePort=true, tcpFastOpenQueueSize=20, minTLSVersion="tls1.2" })

-- listen for DoH on localhost for reverse proxy
addDOHLocal("127.0.0.1:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("127.0.0.1:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("127.0.0.1:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("127.0.0.1:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("[::1]:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("[::1]:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("[::1]:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })
addDOHLocal("[::1]:445", nil, nil, "/dns-query", { numberOfStoredSessions=0, reusePort=true, trustForwardedForHeader=true })

if not file_exists("/var/lib/dnsdist/providerPrivate.key") then
  infolog("Generate DNSCrypt provider keys.")
  generateDNSCryptProviderKeys("/var/lib/dnsdist/providerPublic.cert", "/var/lib/dnsdist/providerPrivate.key")
end

local now = os.time()
local serial = os.date('%Y%m%d', now)
local validity = 365 * 86400  -- 1 year

-- XChaCha20
if not file_exists("/run/dnsdist/resolver_xchacha.cert") then
  infolog("Generate DNSCrypt v2 (XChaCha20) certificate.")
  generateDNSCryptCertificate(
    "/var/lib/dnsdist/providerPrivate.key",
    "/run/dnsdist/resolver_xchacha.cert",
    "/run/dnsdist/resolver_xchacha.key",
    serial,
    now,
    now + validity,
    DNSCryptExchangeVersion.VERSION2  -- X25519-XChaCha20-Poly1305
  )
end

-- Fallback XSalsa20
if not file_exists("/run/dnsdist/resolver_xsalsa.cert") then
  infolog("Generate DNSCrypt v1 (XSalsa20) certificate.")
  generateDNSCryptCertificate(
    "/var/lib/dnsdist/providerPrivate.key",
    "/run/dnsdist/resolver_xsalsa.cert",
    "/run/dnsdist/resolver_xsalsa.key",
    serial,
    now,
    now + validity,
    DNSCryptExchangeVersion.VERSION1  -- X25519-XSalsa20-Poly1305
  )
end

-- listen for DNSCrypt
addDNSCryptBind("0.0.0.0:8443",
  "2.dnscrypt-cert.ffmuc.net",
  { "/run/dnsdist/resolver_xchacha.cert", "/run/dnsdist/resolver_xsalsa.cert" },
  { "/run/dnsdist/resolver_xchacha.key",  "/run/dnsdist/resolver_xsalsa.key"  },
  { reusePort=true }
)
addDNSCryptBind("[::]:8443",
  "2.dnscrypt-cert.ffmuc.net",
  { "/run/dnsdist/resolver_xchacha.cert", "/run/dnsdist/resolver_xsalsa.cert" },
  { "/run/dnsdist/resolver_xchacha.key",  "/run/dnsdist/resolver_xsalsa.key"  },
  { reusePort=true }
)
{% else %}
-- limit resolving on Port 53 to "ffmuc-domains"
addAction(AndRule({NotRule(makeRule({"ffmuc.net"})), NotRule(makeRule({"127.0.0.1","::1","10.80.0.0/16","10.86.0.0/16","10.8.0.0/23","5.1.66.0/24","185.150.99.0/24","2001:678:e68::/48","2001:678:ed0::/48"})), DSTPortRule(53)}), DropAction(), {name="Drop-Gateway-Foreign-Source"})
{% endif %}{# webfrontend in grains.id #}

-- keep BPF capabilities
addCapabilitiesToRetain("CAP_SYS_ADMIN")

-- enable ebpf
bpf = newBPFFilter({ipv4MaxItems=1024, ipv6MaxItems=1024, qnamesMaxItems=1024})
setDefaultBPFFilter(bpf)

-- set number of queries to be allowed per second from an IP but exclude localhost
dbr = dynBlockRulesGroup()
dbr:excludeRange({"127.0.0.1/32", "::1/128" })
dbr:setRCodeRate(DNSRCode.NXDOMAIN, 20, 10, "Exceeded NXD rate", 60, DNSAction.Drop)
dbr:setRCodeRate(DNSRCode.SERVFAIL, 20, 10, "Exceeded SERVFAIL rate", 60, DNSAction.Drop)
dbr:setQTypeRate(DNSQType.PTR, 20, 10, "Exceeded PTR rate", 60, DNSAction.Drop)
dbr:setQueryRate(500, 1, "Exceeded query rate", 60, DNSAction.Drop)
function maintenance()
   dbr:apply()
end
-- Raise ringbuffer size
setRingBuffersSize(100000)

-- Be generous with the sockets setting of newServer. A starting points is to configure twice as many sockets as Recursor threads.
{%- if 'muc01' in salt['pillar.get']('netbox:site:slug') %}
newServer({address="10.8.0.39:1653", name="web05", weight=500, retries=2, id="7cd4655e-071e-4a9a-9623-834ba49ea472", sockets=28})
newServer({address="10.8.0.40:1653", name="web06", weight=500, retries=2, id="d5d0a3a9-6787-479f-ad0f-106d4618ccc2", sockets=28})
newServer({address="10.8.0.38:1653", name="gw06", weight=500, retries=2, id="42c4bdfe-0ccc-4e9e-8816-7f88421b50f8", sockets=28})
newServer({address="10.8.0.13:1653", name="gw07", weight=500, retries=2, id="1c961f33-3a09-4b40-ae9d-5b5a8dd71061", sockets=28})
{%- elif 'vie01' in salt['pillar.get']('netbox:site:slug') %}
newServer({address="10.8.0.29:1653", name="web03", weight=500, retries=2, id="23b0121d-91c5-4338-8c5a-cc8ba6f2ca8d", sockets=28})
newServer({address="10.8.0.30:1653", name="web04", weight=500, retries=2, id="0ed35651-7766-492c-ab44-562e76d395b6", sockets=28})
newServer({address="10.8.0.32:1653", name="gw04", weight=500, retries=2, id="fec91b13-6d71-4162-92a5-68c197ee99c4", sockets=28})
newServer({address="10.8.0.33:1653", name="gw05", weight=500, retries=2, id="24d189ad-2070-458d-b34a-7c0c22ba7bcd", sockets=28})
{%- else %}
newServer({address="1.1.1.1", name="anycastCF"})
{%- endif %}

setWHashedPertubation(3962345)
setServerPolicy(chashed)

-- ask authorative servers for ffmuc.net directly
{%- if 'authorative-dns' in salt['pillar.get']('netbox:tag_list', []) %}
newServer({address="127.0.0.1:553", name="local-auth", pool="auth"}){# bind #}
{%- else %}
  {%- if 'muc01' in salt['pillar.get']('netbox:site:slug') %}
newServer({address="185.150.99.255", name="anycast02", pool="auth"})
  {%- elif 'vie01' in salt['pillar.get']('netbox:site:slug') %}
newServer({address="5.1.66.255", name="anycast01", pool="auth"})
  {%- else %}
newServer({address="1.1.1.1", name="anycastCF", pool="auth"})
  {%- endif %}{# site #}
{%- endif %}{# authoritative #}

addAction({'in.ffmuc.net', 'ov.ffmuc.net', 'ffmuc.net', 'ffmuc.bayern', 'fnmuc.net', 'freewifi.bayern', 'freifunk-muenchen.de', 'xn--freifunk-mnchen-8vb.de.', 'freifunk-muenchen.net', 'muenchen.freifunk.net', 'xn--mnchen-3ya.freifunk.net', 'augsburg.freifunk.net', 'wertingen.freifunk.net', 'donau-ries.freifunk.net'}, PoolAction("auth"), {name="Redirect-Auth"})
addAction(AndRule({OpcodeRule(DNSOpcode.Notify), NotRule(makeRule("213.160.72.212"))}), RCodeAction(DNSRCode.REFUSED))
addAction({'freifunk.net'}, PoolAction("auth"), {name="Redirect-Auth-freifunk.net"})

{#- some stats #}
addAction({'in-addr.arpa', 'ip6.arpa'}, NoneAction(), {name="RDNS"})

-- OpenNIC
newServer({address="89.163.140.67:53", name="v4.ns22.de.opennic", pool="opennic"})
newServer({address="[2001:4ba0:ffa4:1ce::]:53", name="v6.ns22.de.opennic", pool="opennic"})
newServer({address="88.198.92.222:53", name="v4.ns25.opennic", pool="opennic"})
newServer({address="[2a01:4f8:1c0c:82c0::1]:53", name="v6.ns25.opennic", pool="opennic"})
addAction({'bbs','chan','cyb','dns.opennic.glue','dyn','epic','geek','gopher','indy','libre','neo','null','o','opennic.glue','oss','oz','parody','pirate'}, PoolAction("opennic"), {name="Redirect-OpenNIC"})

-- add cache for X possible entries
pc = newPacketCache(4000000)
getPool(""):setCache(pc)
getPool("auth"):setCache(pc)

{%- set dnsdist_webserver = salt["pillar.get"]("netbox:config_context:dnsdist:webserver", []) %}
{%- if "bind" in dnsdist_webserver %}
webserver("{{ dnsdist_webserver["bind"] }}")
setWebserverConfig ({password="{{ dnsdist_webserver["password"] }}", apiKey="{{ dnsdist_webserver["api_token"] }}"})
{%- endif -%}
{%- set dnsdist_console = salt["pillar.get"]("netbox:config_context:dnsdist:console", []) %}
{%- if "bind" in dnsdist_console %}
controlSocket("{{ dnsdist_console["bind"] }}")
setKey("{{ dnsdist_console["key"] }}")
{%- endif %}

setMaxUDPOutstanding(65535)
setMaxTCPClientThreads(50)        -- set X(int) to handle number of maximum tcp clients
setMaxTCPConnectionDuration(120)    -- set X(int) for tcp connection duaration from a connected client. X is number of seconds.
setMaxTCPQueriesPerConnection(3000) -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction())
setOutgoingDoHWorkerThreads(12)
setRandomizedOutgoingSockets(true)
