{%- set own_location = salt['pillar.get']('netbox:site:name') %}
# Get all webfrontend servers in the same location
{%- set webfrontends_same_location = [] %}
{%- set all_nodes = salt['mine.get']('netbox:role:name:webserver-external', 'minion_id', tgt_type='pillar') %}

{%- for node in all_nodes %}
  {%- set node_location = salt['mine.get'](node, 'minion_location', tgt_type='glob') %}
  {%- if node_location and node_location[node] == own_location and grains['id'] != node %}
    {%- do webfrontends_same_location.append(node) %}
  {%- endif %}
{%- endfor %}
global
    log /dev/log    len 8000 local0
    log /dev/log    len 8000 local1 notice

    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats socket /run/haproxy/api.sock mode 666 level user
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Enable quic
    limited-quic

    #Tuning
    tune.bufsize 68608
    tune.rcvbuf.client 262144
    tune.sndbuf.client 262144
    tune.maxrewrite 4096
    tune.pipesize 262144
    tune.ssl.maxrecord 1370
    tune.ssl.cachesize 0
    tune.ssl.capture-buffer-size 2048
    tune.h2.initial-window-size 67108864
    tune.quic.max-frame-loss 40
    tune.quic.reorder-ratio 60
    tune.listener.default-shards by-thread
    prealloc-fd

    # DDoS things
    tune.h2.fe.max-total-streams 1000
    tune.h2.fe.glitches-threshold 1000
    tune.quic.frontend.glitches-threshold 1000

    # More worker threads
    nbthread {{ grains.num_cpus }}

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    log     global
    mode    http
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    log-format '{"message":"%[var(txn.src_masked)] %[capture.req.hdr(0)] - %HM %HU - %ST","timestamp":"%t","http_host":"%[capture.req.hdr(0)]","port":"%fp","remote_addr":"%[var(txn.src_masked)]","remote_user":"","upstream_addr":"%si:%sp","upstream_cache_status":"","upstream_duration":"%Tt","http_request_method":"%HM","http_request_uri":"%[capture.req.hdr(2)]","http_uri":"%HU","http_params":"%HU","http_referer":"%[capture.req.hdr(1)]","http_user_agent":"%[capture.req.hdr(3)]","http_protocol_version":"%HV","response_status":"%ST","body_bytes_sent":"%B","ssl_protocol":"%[ssl_fc_protocol]","gzip_ratio":"","pid":%pid,"haproxy_frontend_type":"http","haproxy_process_concurrent_connections":%ac,"haproxy_frontend_concurrent_connections":%fc,"haproxy_backend_concurrent_connections":%bc,"haproxy_server_concurrent_connections":%sc,"haproxy_backend_queue":%bq,"haproxy_server_queue":%sq,"haproxy_client_request_send_time":%Tq,"haproxy_queue_wait_time":%Tw,"haproxy_server_wait_time":%Tc,"haproxy_server_response_send_time":%Tr,"response_time":%Td,"session_duration":%Tt,"request_termination_state":"%tsc","haproxy_server_connection_retries":%rc,"remote_port":%cp,"frontend_addr":"%fi","frontend_ssl_version":"%[ssl_fc_cipher]","frontend_ssl_ciphers":"%[ssl_fc_cipher]","haproxy_frontend_name":"%f","haproxy_backend_name":"%b","haproxy_server_name":"%s","request_size":%U}'

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http


frontend stats
    mode http
    bind 127.0.0.1:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

frontend http-in
    bind [::]:8880 v4v6

    # Redirect all HTTP requests to HTTPS preserving the hostname and URI
    #redirect scheme https code 301 if !{ ssl_fc }
    http-request set-header X-Forwarded-Proto http
    default_backend servers

crt-store
    crt-base /etc/letsencrypt/live
    key-base /etc/letsencrypt/live
    load crt "ffmuc.net/fullchain.pem" key "ffmuc.net/privkey.pem" alias "ffmuc.net"
    load crt "muenchen.freifunk.net/fullchain.pem" key "muenchen.freifunk.net/privkey.pem" alias "muenchen.freifunk.net"

frontend https-in
    bind :443     ssl crt "@/ffmuc.net" crt "@/muenchen.freifunk.net" alpn h2,http/1.1
    bind [::]:443 ssl crt "@/ffmuc.net" crt "@/muenchen.freifunk.net" alpn h2,http/1.1 v6only

   # QUIC / HTTP/3
    bind quic4@:443 alpn h3 ssl crt "@/ffmuc.net" crt "@/muenchen.freifunk.net"
    bind quic6@[::]:443 alpn h3 ssl crt "@/ffmuc.net" crt "@/muenchen.freifunk.net" v6only

    http-after-response add-header alt-svc 'h3=":443"; ma=60'

    # Host-based ACLs
    acl is_cloud hdr(host) -i cloud.ffmuc.net cloud.ext.ffmuc.net cloud.freifunk-muenchen.de
    acl is_doh hdr(host) -i doh.ffmuc.net dot.ffmuc.net
    acl is_tickets hdr(host) -i tickets.ffmuc.net
    acl is_chat hdr(host) -i chat.ffmuc.net chat-test.ffmuc.net
    acl is_stats hdr(host) -i stats.ffmuc.net graphs.ext.ffmuc.net
    acl is_silo hdr(host) -i silo.ffmuc.net
    acl is_speed hdr(host) -i speed.ffmuc.net speed-muc.ffmuc.net speed-vie.ffmuc.net speed4.ffmuc.net speed6.ffmuc.net speedtest.ffmuc.net
    acl is_vaultwarden hdr(host) -i vault.ffmuc.net


    # Anonymise our IPs
    http-request set-var(txn.src_masked) src,ipmask(24,64)

    # Set standard proxy headers
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }

    # Captures used by log-format: host at hdr(0), referer at hdr(1), path at hdr(2), user-agent at hdr(3)
    capture request header Host len 80
    capture request header Referer len 200
    http-request capture path len 200
    capture request header User-Agent len 300

    # Set security headers
    http-response set-header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload;" if { ssl_fc }
    http-response set-header X-FFMUC-Edge "{{ grains.id.split('.')[0] }}"
    http-response set-header X-FFMUC-Location "{{ own_location }}"

    # Special handling for large uploads (cloud)
    http-request set-header Connection "upgrade" if is_cloud

    # Special redirects for cloud CalDAV/CardDAV
    http-request redirect code 301 location https://%[req.hdr(host)]/remote.php/dav if is_cloud { path /.well-known/carddav }
    http-request redirect code 301 location https://%[req.hdr(host)]/remote.php/dav if is_cloud { path /.well-known/caldav }

    # Add tickets ACL and WebSocket handling to the frontend
    acl is_tickets_ws path_beg /ws

    # Special WebSocket handling for tickets
    http-request set-header Upgrade %[req.hdr(upgrade)] if is_tickets is_tickets_ws
    http-request set-header Connection "upgrade" if is_tickets is_tickets_ws

    # Special handling for chat websocket paths
    acl is_chat_websocket path_beg /api/v4/websocket

    # WebSocket handling for chat (Mattermost)
    http-request set-header Upgrade %[req.hdr(upgrade)] if is_chat is_chat_websocket
    http-request set-header Connection "Upgrade" if is_chat is_chat_websocket

    # Path-based ACLs for silo routing
    acl is_silo_socket path_beg /socket.io

    # DoH ACLs
    acl is_ipv4 src -m ip 0.0.0.0/0
    acl is_ipv6 src -m ip ::/0

    # Route to backends based on host and path
    use_backend doh_backend_v4 if is_doh is_ipv4 { path /dns-query }
    use_backend doh_backend_v6 if is_doh is_ipv6 { path /dns-query }

    use_backend chat_backend if is_chat
    use_backend cloud_backend if is_cloud
    use_backend silo_socket_backend if is_silo is_silo_socket
    use_backend silo_backend if is_silo
    use_backend stats_backend if is_stats
    use_backend speed_backend if is_speed
    use_backend tickets_backend if is_tickets
    use_backend vaultwarden_backend if is_vaultwarden

    default_backend servers

# Default local nginx
backend servers
    http-request set-header Host %[req.hdr(host)]
    server nginx 127.0.0.1:8843 ssl verify none maxconn 200

# DoH v4
backend doh_backend_v4
    option http-keep-alive
    option redispatch
    retries 2
    http-reuse aggressive
    server dnsdistv4 127.0.0.1:445 check proto h2
    {%- for webfrontend in webfrontends_same_location %}
    server {{ webfrontend }} {{ webfrontend }}:445 check proto h2 backup
    {%- endfor %}

# DoH v6
backend doh_backend_v6
    option http-keep-alive
    option redispatch
    retries 2
    http-reuse aggressive
    server dnsdistv6 ::1:445 check proto h2
    {%- for webfrontend in webfrontends_same_location %}
    server {{ webfrontend }} {{ webfrontend }}:445 check proto h2 backup
    {%- endfor %}

# Nextcloud backend
backend cloud_backend
    mode http
    balance roundrobin
    option httpchk GET /status.php
    http-check expect status 200

    # Force HTTP/1.1 with keep-alive for better ETag support
    option http-keep-alive
    http-reuse aggressive

    http-response set-header X-Frame-Options "SAMEORIGIN"
    server docker05 docker05.ov.ffmuc.net:8089 check

# Tickets backend
backend tickets_backend
    mode http
    balance roundrobin
    option httpchk GET /
    server docker05 docker05.ov.ffmuc.net:8002 check

# Chat backend
backend chat_backend
    mode http
    balance roundrobin
    option httpchk GET /api/v4/system/ping
    http-check expect status 200

    # Force HTTP/1.1 with keep-alive for better ETag support
    option http-keep-alive
    http-reuse aggressive

    # Longer timeouts for WebSocket connections
    timeout server 300s
    timeout connect 90s

    # Set frame options header for security
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-request set-header X-Frame-Options "SAMEORIGIN"

    server docker05 docker05.ov.ffmuc.net:8000 check

# Stats/Grafana backend
backend stats_backend
    mode http
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    server metrics metrics.ov.ffmuc.net:3000 ssl verify none check

# Silo main backend
backend silo_backend
    mode http
    balance roundrobin
    option httpchk GET /

    # Special headers for silo
    http-request set-header Host "silo.ffmuc.net"
    http-response replace-header Location ^http://ejabberd/ https://silo.ffmuc.net/

    server silo1 46.226.127.8:8080 check

# Silo socket.io backend (WebSocket support)
backend silo_socket_backend
    mode http
    balance roundrobin

    # WebSocket support for socket.io
    timeout server 300s
    timeout connect 90s

    # Special headers for socket.io
    http-request set-header Host "silo.ffmuc.net"
    http-request set-header Upgrade %[req.hdr(upgrade)]
    http-request set-header Connection "upgrade"

    server silo1 46.226.127.8:8080 check

backend vaultwarden_backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

    http-request deny if { path_beg /admin }
    server vaultwarden docker07.ov.ffmuc.net:11001 check

# Speed test main backend
backend speed_backend
    mode http
    balance roundrobin
    option httpchk GET /
    
    # Speed test specific optimizations
    option http-keep-alive
    option http-no-delay
    http-reuse aggressive
    no option httpclose
    no option http-buffer-request
    
    # Disable caching for speed tests
    http-response set-header Cache-Control "no-store, no-cache, max-age=0, no-transform"
    http-response set-header Last-Modified "%[date]"
    http-response del-header ETag
    
    # Special headers for speed test
    http-request set-header Host "speed.ffmuc.net"
    http-request set-header Connection "upgrade"

    {%- if own_location == "VIE01" %}
    server docker05 docker05.in.ffmuc.net:3000 check
    server docker07 docker07.ov.ffmuc.net:3000 check backup
    {%- else %}
    server docker07 docker07.in.ffmuc.net:3000 check
    server docker05 docker05.ov.ffmuc.net:3000 check backup
    {%- endif %}


