{%- from "nebula/map.jinja" import nebula with context %}
{%- set role = salt['pillar.get']('netbox:role:name', salt['pillar.get']('netbox:device_role:name')) %}
{%- set tags = salt['pillar.get']('netbox:tag_list', []) %}

pki:
  ca: /etc/nebula/ca.crt
  cert: /etc/nebula/{{ grains.id }}.crt
  key: /etc/nebula/{{ grains.id }}.key

static_host_map:
{%- for lighthouse, public_addrs in nebula.lighthouses.items() %}
  "{{ lighthouse }}": {{ public_addrs }}
{%- endfor %}
lighthouse:
  am_lighthouse: {{ nebula.am_lighthouse }}
  interval: 60
  hosts:
{%- for lighthouse in nebula.lighthouses %}
    - {{ lighthouse }}
{%- endfor %}

  local_allow_list:
    interfaces:
      lo: false
{%- if 'docker' in grains.id %}{# dont filter gw*-networks #}
      'br-.*': false
{%- endif %}

listen:
  host: "{{ nebula.listen.host }}"
  port: {{ nebula.listen.port }}

punchy:
  punch: true
  respond: true
  delay: 1s

{%- if nebula.loophole.enabled %}
sshd:
  enabled: true
  listen: 127.0.0.1:2222
  host_key: /etc/nebula/ssh_host_ed25519_key
  authorized_users:
    - user: loop
      keys:
      {%- for key in nebula.loophole.ssh_keys %}
       - {{ key }}
      {%- endfor %}
{%- endif %}


{%- set local_prefixes = salt['pillar.get']("netbox:site:prefixes") %}
preferred_ranges:
{%- for prefix in local_prefixes %}
  {%- if prefix.status.value == "active" and prefix.family.value == 4 and prefix.role and prefix.role.slug == "pop-internal" %}
  - "{{ prefix.prefix }}"
  {%- endif %}
{%- endfor %}
{%- for prefix in local_prefixes %}
  {%- if prefix.status.value == "active" and prefix.family.value == 4 and prefix.role and prefix.role.slug == "public" %}
  - "{{ prefix.prefix }}"
  {%- endif %}
{%- endfor %}

tun:
  dev: {{ nebula.interface }}
  # Toggles forwarding of local broadcast packets, the address of which depends on the ip/mask encoded in pki.cert
  drop_local_broadcast: true
  # Toggles forwarding of multicast packets
  drop_multicast: true
  tx_queue: 500
  mtu: 1300

handshakes:
  try_interval: 100ms
  retries: {{ nebula.handshakes.retries }}
  wait_rotation: 5
  trigger_buffer: 64

logging:
  level: info
  format: text

firewall:
  conntrack:
    tcp_timeout: 120h
    udp_timeout: 3m
    default_timeout: 10m
    max_connections: 100000

  outbound:
  - port: any
    proto: any
    host: any

  inbound:
  - port: any
    proto: icmp
    host: any
    # SSH
  - port: 22
    proto: tcp
    host: any
{%- if "webserver" in role %}
    # HTTP
  - port: 80
    proto: tcp
    host: any
{%- endif %}
    # HTTPS
  - port: 443
    proto: tcp
    host: any
    # SNMP
  - port: 161
    proto: udp
    host: librenms.in.ffmuc.net
  - port: 161
    proto: udp
    host: nms.in.ffmuc.net
  - port: 161
    proto: udp
    host: docker07.in.ffmuc.net
    # mosh
  - port: 60001-60010
    proto: udp
    host: any
{%- if "docker06.in.ffmuc.net" == grains["id"] %}
  # Allow connections for http backend of broker.ffmuc.net
  - port: 5000
    proto: tcp
    group: webfrontend
   # Allow connections for http backend of broker.ffmuc.net
  - port: 8888
    proto: tcp
    group: webfrontend
  # Allow connections for mqtt backend of broker.ffmuc.net
  - port: 1883
    proto: tcp
    host: any
  # Allow MQTT replicas
  - port: 4370
    proto: tcp
    host: any
  - port: 5369
    proto: tcp
    host: any
    # Allow pushing to graylog via filebeat
  - port: 5044
    proto: tcp
    host: any
    # Allow pushing to graylog via gelf
  - port: 12201
    proto: tcp
    host: any
{%- endif %}
{%- if "docker04.in.ffmuc.net" == grains["id"] %}
  # Allow MQTT replicas
  - port: 4370
    proto: tcp
    host: any
  - port: 5369
    proto: tcp
    host: any
  # Allow connections for draw
  - port: 5001
    proto: tcp
    group: webfrontend
  # Allow connections for http backend of broker.ffmuc.net
  - port: 5000
    proto: tcp
    group: webfrontend
  # Allow connections for mqtt backend of broker.ffmuc.net
  - port: 1883
    proto: tcp
    host: any
  # Allow connections for mqtt backend of broker.ffmuc.net
  - port: 1884
    proto: tcp
    host: any
  # Allow connections for etherpad
  - port: 8081
    proto: tcp
    group: webfrontend
  # Allow connections for ffmuc.net/wiki
  - port: 8084
    proto: tcp
    group: webfrontend
  # Allow connections for hedgedoc
  - port: 8085
    proto: tcp
    group: webfrontend
  # Allow connections for excalidraw.ffmuc.net
  - port: 8090
    proto: tcp
    group: webfrontend
  # Allow connections for matomo.ffmuc.net
  - port: 8092
    proto: tcp
    group: webfrontend
  # Allow connections for ldap
  - port: 636
    proto: tcp
    host: any
  - port: 80
    proto: tcp
    host: any
  - port: 8087
    proto: tcp
    host: any
  # Allow connections for conferencemapper.ffmuc.net
  - port: 8001
    proto: tcp
    group: webfrontend
  # RTMP Backend for tv.ffmuc.net
  - port: 1935
    proto: tcp
    host: any
  # Allow connections for ldap
  - port: 8443
    proto: tcp
    host: any
  # Allow streetmap
  - port: 8881
    proto: tcp
    group: webfrontend
{%- endif %}
{%- if "docker05.in.ffmuc.net" == grains["id"] %}
  # Allow MQTT replicas
  - port: 4370
    proto: tcp
    host: any
  - port: 5369
    proto: tcp
    host: any
  # Allow connections for mqtt backend of broker.ffmuc.net
  - port: 5000
    proto: tcp
    group: webfrontend
  # Allow connections for http backend of broker.ffmuc.net
  - port: 1883
    proto: tcp
    host: any
  # Allow connections for chat.ffmuc.net
  - port: 8000
    proto: tcp
    group: webfrontend
  # Allow connections for cloud.ffmuc.net
  - port: 8089
    proto: tcp
    group: webfrontend
  # Allow connections for cryptpad.ffmuc.net
  - port: 8011
    proto: tcp
    group: webfrontend
  - port: 8012
    proto: tcp
    group: webfrontend
  # Allow connections for tickets.ffmuc.net
  - port: 8002
    proto: tcp
    group: webfrontend
  # Allow connections for speed.ffmuc.net
  - port: 80
    proto: tcp
    group: webfrontend
    # Allow connections for unifi (web)
  - port: 8443
    proto: tcp
    group: webfrontend
  # Allow connections for unifi (stun)
  - port: 3478
    proto: udp
    group: webfrontend
  # Allow connections for unifi (inform)
  - port: 8080
    proto: tcp
    group: webfrontend
    # Allow connections for unifi (inform)
  - port: 8585
    proto: tcp
    host: any
  - port: 8553
    proto: tcp
    host: any
  - port: 1935
    proto: tcp
    host: any
  - port: 1937
    proto: tcp
    host: any
  - port: 8088
    proto: tcp
    host: any
  # Allow salt access for any host in the network
  - port: 4505-4506
    proto: tcp
    host: any
{%- endif %}
{%- if "docker06.in.ffmuc.net" == grains["id"] %}
  # Allow connections for byro
  - port: 8345
    proto: tcp
    group: webfrontend
  # Allow connections for byro (static)
  - port: 8346
    proto: tcp
    group: webfrontend
  # Allow connections for omada controller
  - port: 8043
    proto: tcp
    group: webfrontend
  - port: 29810
    proto: udp
    group: webfrontend
  - port: 29811
    proto: tcp
    group: webfrontend
  - port: 29812
    proto: tcp
    group: webfrontend
  - port: 29813
    proto: tcp
    group: webfrontend
  - port: 29814
    proto: tcp
    group: webfrontend
  - port: 3000
    proto: tcp
    group: webfrontend
  - port: 4000
    proto: tcp
    group: webfrontend
  - port: 3001
    proto: tcp
    group: webfrontend
{%- endif %}
{%- if "docker07.in.ffmuc.net" == grains["id"] %}
  # Allow connections for http backend of broker.ffmuc.net
  - port: 5000
    proto: tcp
    group: webfrontend
  # Allow connections for mqtt backend of broker.ffmuc.net
  - port: 1883
    proto: tcp
    host: any
  # Allow MQTT replicas
  - port: 4370
    proto: tcp
    host: any
  - port: 5369
    proto: tcp
    host: any
  # Elastiflow Logstash
  - port: 2055
    proto: udp
    host: any
  # Elastiflow Logstash
  - port: 6343
    proto: udp
    host: any
  - port: 9995
    proto: udp
    host: any
  # Graylog Webfrontend
  - port: 9000
    proto: tcp
    host: any
  # Allow pushing to graylog via filebeat
  - port: 5044
    proto: tcp
    host: any
    # Allow connections for speed.ffmuc.net
  - port: 8080
    proto: tcp
    group: webfrontend
  - port: 8081
    proto: tcp
    group: webfrontend
  - port: 9443
    proto: tcp
    group: webfrontend
  - port: 2055
    proto: udp
    group: webfrontend
{%- endif %}
{%- if 'metrics.in.ffmuc.net' == grains["id"] %}
  # Allow stats access
  - port: 3000
    proto: tcp
    group: any
  # Allow stats incoming
  - port: 8086
    proto: tcp
    host: any
{%- endif %}
{%- if "dnsserver" == role or "dnsdist" in tags or "gateway" in role %}
  - port: 53
    proto: udp
    host: any
  - port: 53
    proto: tcp
    host: any
  # Bind
  - port: 553
    proto: udp
    host: any
  - port: 553
    proto: tcp
    host: any
  # access pdns-recursor as dnsdist is listening on 53
  - port: 1653
    proto: udp
    host: any
  - port: 1653
    proto: tcp
    host: any
{%- endif %}
{%- if "dnsdist" in tags %}
  - port: 8083
    proto: tcp
    host: any
{%- endif %}
{%- if "icinga-vie01.in.ffmuc.net" == grains["id"] %}
  # Allow icinga2
  - port: 5665
    proto: tcp
    host: any
{%- endif %}
  - port: 5665
    proto: tcp
    host: icinga-vie01.in.ffmuc.net
{%- if "nms.in.ffmuc.net" == grains["id"] %}
  - port: 80
    proto: tcp
    group: webfrontend
{%- endif %}
{%- if "roadwarrior" == role %}
  - port: 8000
    proto: tcp
    group: webfrontend
{%- endif %}
